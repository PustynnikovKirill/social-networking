{"version":3,"file":"static/js/525.51ad6374.chunk.js","mappings":"mLACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA6K,0B,UCA7K,K,SCWaA,EAAiC,SAACC,GAC3C,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,OAAe,IAAMA,EAAAA,OAArC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCftC,KCQaC,EAAgC,SAACP,GAC1C,OACI,gBAAKG,UAAWC,EAAAA,QAAhB,SAAgCJ,EAAMQ,Y,iDCqCxCC,GAAcC,EAAAA,EAAAA,GAAiB,IAgB/BC,GAAsBC,EAAAA,EAAAA,GAA+B,CAACC,KAAK,wBAArCD,EAd4C,SAACZ,GACrE,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXC,SAAY,CAACC,EAAAA,EAASX,GACtBH,KAAO,iBACPe,YAAa,0BAExB,0BAAK,6C,SCpCJC,GAAmBC,E,QAAAA,KAAQC,EAAAA,EAAAA,KAflB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,YACnBC,OAAQF,EAAMG,KAAKD,WAGF,SAACE,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAmBD,SAMRR,EDLa,SAACvB,GAC9BA,EAAM0B,YAAlB,IAGIO,EAAkBjC,EAAM0B,YAAYQ,QAAQC,KAAI,SAAAC,GAAE,OAAI,SAACrC,EAAD,CAAwBO,KAAM8B,EAAG9B,KAAMJ,GAAIkC,EAAGlC,IAA7BkC,EAAGlC,OAC1EmC,EAAoBrC,EAAM0B,YAAYlB,SAAS2B,KAAI,SAAAC,GAAE,OAAE,SAAC7B,EAAD,CAAqBL,GAAIkC,EAAGlC,GAAIM,SAAU4B,EAAG5B,UAA/B4B,EAAGlC,OAO5E,OAAKF,EAAM2B,QAIP,iBAAKxB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK6B,KAEL,iBAAK9B,UAAWC,EAAhB,WACI,yBAAMiC,KACN,0BACI,SAAC1B,EAAD,CAAqBG,SAdjB,SAACiB,GACjB/B,EAAM8B,YAAYC,eAGP,SAAC,KAAD,CAAU1B,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__+tozJ\",\"dialogsItems\":\"Dialogs_dialogsItems__j0DQf\",\"active\":\"Dialogs_active__VLcz3\",\"dialog\":\"Dialogs_dialog__0PMEv\",\"messages\":\"Dialogs_messages__korNF\",\"message\":\"Dialogs_message__C-FgX\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport style from './DialogItem.module.css';\r\n\r\n\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n\r\nexport const DialogItem:React.FC<DialogType>= (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={style.dialog + ' ' + style.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\r\nimport style from './Message.module.css';\r\n\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    messages: string\r\n}\r\n\r\nexport const Message:React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={style.message}>{props.messages}</div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport style from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {InitialStateType} from \"../../redux/dialogs.reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/Preloader/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type DialogsType = {\r\n    sendMessage:(newMessageBody:FormMessageDataType)=>void\r\n    dialogsPage:InitialStateType\r\n    isAuth:boolean\r\n}\r\nexport type FormMessageDataType = {\r\n    newMessageBody:string\r\n}\r\nexport const Dialogs:React.FC<DialogsType> = (props) => {\r\n    let state = props.dialogsPage\r\n    //let state = props.store.getState().dialogsPage\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(el => <DialogItem key={el.id} name={el.name} id={el.id}/>)\r\n    let messagesElement =   props.dialogsPage.messages.map(el=><Message key={el.id} id={el.id} messages={el.messages}/>)\r\n    // let newMessageBody =   props.dialogsPage.newMessageBody;\r\n\r\n\r\n    let addNewMessage = (newMessageBody:FormMessageDataType) => {\r\n        props.sendMessage(newMessageBody)\r\n    }\r\n    if (!props.isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(40)\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormMessageDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate = {[required,maxLength50]}\r\n                       name = \"newMessageBody\"\r\n                       placeholder= \"Enter your message\"/>\r\n             </div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormMessageDataType>({form:\"dialogAddMessageForm\"})(AddMessageForm)\r\n","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/dialogs.reducer\";\r\nimport {Dialogs, FormMessageDataType} from \"./Dialogs\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        sendMessage: (newMessageBody:FormMessageDataType) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const DialogsContainer = compose(connect(mapStateToProps, mapDispatchToProps))(Dialogs);\r\n\r\n\r\n"],"names":["DialogItem","props","path","id","className","style","to","name","Message","messages","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","DialogsContainer","compose","connect","state","dialogsPage","isAuth","auth","dispatch","sendMessage","newMessageBody","sendMessageCreator","dialogsElements","dialogs","map","el","messagesElement"],"sourceRoot":""}